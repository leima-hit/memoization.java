= memoization.java image:https://img.shields.io/badge/email-%40metio-brightgreen.svg?style=social&label=mail["Discuss on Google Groups", link="https://groups.google.com/forum/#!forum/metio"] image:https://img.shields.io/badge/irc-%23metio.wtf-brightgreen.svg?style=social&label=IRC["Chat on IRC", link="http://webchat.freenode.net/?channels=metio.wtf"]
Sebastian Hoß <http://seb.xn--ho-hia.de/[@sebhoss]>
:github-org: sebhoss
:project-name: memoization.java
:project-group: de.xn--ho-hia.memoization
:coverity-project: 8732
:codacy-project: 0ed810b7f2514f0ea1c8e86e97c803c4
:jdk-api: https://docs.oracle.com/javase/8/docs/api
:issue: https://github.com/sebhoss/memoization.java/issues
:toc:
:toc-placement: preamble

image:https://img.shields.io/badge/license-cc%20zero-000000.svg?style=flat-square["CC Zero", link="http://creativecommons.org/publicdomain/zero/1.0/"]
pass:[<span class="image"><a class="image" href="https://maven-badges.herokuapp.com/maven-central/de.xn--ho-hia.memoization/memoization.java"><img src="https://img.shields.io/maven-central/v/de.xn--ho-hia.memoization/memoization.java.svg?style=flat-square" alt="Maven Central"></a></span>]
image:https://reposs.herokuapp.com/?path={github-org}/{project-name}&style=flat-square["Repository size"]
image:https://www.openhub.net/p/memoization-java/widgets/project_thin_badge?format=gif["Open Hub statistics", link="https://www.openhub.net/p/memoization-java"]

image:https://img.shields.io/travis/{github-org}/{project-name}/master.svg?style=flat-square["Build Status", link="https://travis-ci.org/{github-org}/{project-name}"]
image:https://img.shields.io/coveralls/{github-org}/{project-name}/master.svg?style=flat-square["Code Coverage", link="https://coveralls.io/github/{github-org}/{project-name}"]
image:https://img.shields.io/coverity/scan/{coverity-project}.svg?style=flat-square["Coverity Scan Result", link="https://scan.coverity.com/projects/{github-org}-memoization-java"]
image:https://img.shields.io/codacy/grade/{codacy-project}.svg?style=flat-square["Codacy Code Quality", link="https://www.codacy.com/app/mail_7/memoization-java"]
image:https://img.shields.io/badge/forkable-yes-brightgreen.svg?style=flat-square["Can this project be forked?", link="https://basicallydan.github.io/forkability/?u={github-org}&r={project-name}"]
image:https://img.shields.io/maintenance/yes/2016.svg?style=flat-square["Is this thing still maintained?"]
image:https://img.shields.io/bountysource/team/metio/activity.svg?style=flat-square["Bounties on open tickets", link="https://www.bountysource.com/teams/metio"]

Java link:https://en.wikipedia.org/wiki/Memoization[memoization] library.

== Features

* Memoize calls to `Supplier`, `Function`, `BiFunction`, `Consumer` and all other functional interfaces in `java.util.function`
* link:{jdk-api}/java/util/concurrent/ConcurrentMap.html[`ConcurrentMap`] based implementation either using `ConcurrentHashMap` or your own `ConcurrentMap` implementation. pass:[<span class="image"><a class="image" href="https://www.javadoc.io/doc/de.xn--ho-hia.memoization/memoization-core"><img src="https://www.javadoc.io/badge/de.xn--ho-hia.memoization/memoization-core.svg?style=flat-square&color=blue" alt="Read JavaDocs"></a></span>]
* link:https://github.com/ben-manes/caffeine[Caffeine] based implementation pass:[<span class="image"><a class="image" href="https://www.javadoc.io/doc/de.xn--ho-hia.memoization/memoization-caffeine"><img src="https://www.javadoc.io/badge/de.xn--ho-hia.memoization/memoization-caffeine.svg?style=flat-square&color=blue" alt="Read JavaDocs"></a></span>]
* link:https://github.com/google/guava/wiki/CachesExplained[Guava] based implementation pass:[<span class="image"><a class="image" href="https://www.javadoc.io/doc/de.xn--ho-hia.memoization/memoization-guava"><img src="https://www.javadoc.io/badge/de.xn--ho-hia.memoization/memoization-guava.svg?style=flat-square&color=blue" alt="Read JavaDocs"></a></span>]
* link:https://jcp.org/en/jsr/detail?id=107[JCache] based implementation pass:[<span class="image"><a class="image" href="https://www.javadoc.io/doc/de.xn--ho-hia.memoization/memoization-jcache"><img src="https://www.javadoc.io/badge/de.xn--ho-hia.memoization/memoization-jcache.svg?style=flat-square&color=blue" alt="Read JavaDocs"></a></span>]

.Coverage of `java.util.function`
|===
| | Caffeine | Guava | JCache | ConcurrentMap

| link:{jdk-api}/java/util/function/BiConsumer.html[BiConsumer]
| link:{issue}/88[#88]
| link:{issue}/54[#54]
| link:{issue}/126[#126]
| ✓

| link:{jdk-api}/java/util/function/BiFunction.html[BiFunction]
| link:{issue}/89[#89]
| ✓
| link:{issue}/160[#160]
| ✓

| link:{jdk-api}/java/util/function/BiPredicate.html[BiPredicate]
| link:{issue}/90[#90]
| link:{issue}/55[#55]
| link:{issue}/127[#127]
| ✓

| link:{jdk-api}/java/util/function/BooleanSupplier.html[BooleanSupplier]
| ✓
| link:{issue}/56[#56]
| link:{issue}/128[#128]
| ✓

| link:{jdk-api}/java/util/function/Consumer.html[Consumer]
| ✓
| ✓
| link:{issue}/161[#161]
| ✓

| link:{jdk-api}/java/util/function/DoubleBinaryOperator.html[DoubleBinaryOperator]
| ✓
| link:{issue}/57[#57]
| link:{issue}/129[#129]
| ✓

| link:{jdk-api}/java/util/function/DoubleConsumer.html[DoubleConsumer]
| ✓
| link:{issue}/58[#58]
| link:{issue}/130[#130]
| ✓

| link:{jdk-api}/java/util/function/DoublePredicate.html[DoublePredicate]
| ✓
| link:{issue}/59[#59]
| link:{issue}/131[#131]
| ✓

| link:{jdk-api}/java/util/function/DoubleSupplier.html[DoubleSupplier]
| ✓
| link:{issue}/60[#60]
| link:{issue}/132[#132]
| ✓

| link:{jdk-api}/java/util/function/DoubleToIntFunction.html[DoubleToIntFunction]
| ✓
| link:{issue}/61[#61]
| link:{issue}/133[#133]
| ✓

| link:{jdk-api}/java/util/function/DoubleToLongFunction.html[DoubleToLongFunction]
| ✓
| link:{issue}/62[#62]
| link:{issue}/134[#134]
| ✓

| link:{jdk-api}/java/util/function/DoubleUnaryOperator.html[DoubleUnaryOperator]
| ✓
| link:{issue}/63[#63]
| link:{issue}/135[#135]
| ✓

| link:{jdk-api}/java/util/function/Function.html[Function]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/IntBinaryOperator.html[IntBinaryOperator]
| ✓
| link:{issue}/64[#64]
| link:{issue}/136[#136]
| ✓

| link:{jdk-api}/java/util/function/IntConsumer.html[IntConsumer]
| ✓
| link:{issue}/65[#65]
| link:{issue}/137[#137]
| ✓

| link:{jdk-api}/java/util/function/IntPredicate.html[IntPredicate]
| ✓
| link:{issue}/66[#66]
| link:{issue}/138[#138]
| ✓

| link:{jdk-api}/java/util/function/IntSupplier.html[IntSupplier]
| ✓
| link:{issue}/67[#67]
| link:{issue}/139[#139]
| ✓

| link:{jdk-api}/java/util/function/IntToDoubleFunction.html[IntToDoubleFunction]
| ✓
| link:{issue}/68[#68]
| link:{issue}/140[#140]
| ✓

| link:{jdk-api}/java/util/function/IntToLongFunction.html[IntToLongFunction]
| ✓
| link:{issue}/69[#69]
| link:{issue}/141[#141]
| ✓

| link:{jdk-api}/java/util/function/IntUnaryOperator.html[IntUnaryOperator]
| ✓
| link:{issue}/70[#70]
| link:{issue}/142[#142]
| ✓

| link:{jdk-api}/java/util/function/LongBinaryOperator.html[LongBinaryOperator]
| ✓
| link:{issue}/71[#71]
| link:{issue}/143[#143]
| ✓

| link:{jdk-api}/java/util/function/LongConsumer.html[LongConsumer]
| link:{issue}/109[#109]
| link:{issue}/72[#72]
| link:{issue}/144[#144]
| ✓

| link:{jdk-api}/java/util/function/LongPredicate.html[LongPredicate]
| ✓
| link:{issue}/73[#73]
| link:{issue}/145[#145]
| ✓

| link:{jdk-api}/java/util/function/LongSupplier.html[LongSupplier]
| ✓
| link:{issue}/74[#74]
| link:{issue}/146[#146]
| ✓

| link:{jdk-api}/java/util/function/LongToDoubleFunction.html[LongToDoubleFunction]
| ✓
| link:{issue}/75[#75]
| link:{issue}/147[#147]
| ✓

| link:{jdk-api}/java/util/function/LongToIntFunction.html[LongToIntFunction]
| ✓
| link:{issue}/76[#76]
| link:{issue}/148[#148]
| ✓

| link:{jdk-api}/java/util/function/LongUnaryOperator.html[LongUnaryOperator]
| ✓
| link:{issue}/77[#77]
| link:{issue}/149[#149]
| ✓

| link:{jdk-api}/java/util/function/ObjDoubleConsumer.html[ObjDoubleConsumer]
| link:{issue}/115[#115]
| link:{issue}/78[#78]
| link:{issue}/150[#150]
| ✓

| link:{jdk-api}/java/util/function/ObjIntConsumer.html[ObjIntConsumer]
| link:{issue}/116[#116]
| link:{issue}/79[#79]
| link:{issue}/151[#151]
| ✓

| link:{jdk-api}/java/util/function/ObjLongConsumer.html[ObjLongConsumer]
| link:{issue}/117[#117]
| link:{issue}/80[#80]
| link:{issue}/152[#152]
| ✓

| link:{jdk-api}/java/util/function/Predicate.html[Predicate]
| ✓
| link:{issue}/81[#81]
| link:{issue}/153[#153]
| ✓

| link:{jdk-api}/java/util/function/Supplier.html[Supplier]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ToDoubleBiFunction.html[ToDoubleBiFunction]
| ✓
| link:{issue}/82[#82]
| link:{issue}/154[#154]
| ✓

| link:{jdk-api}/java/util/function/ToIntBiFunction.html[ToIntBiFunction]
| ✓
| link:{issue}/83[#83]
| link:{issue}/155[#155]
| ✓

| link:{jdk-api}/java/util/function/ToLongBiFunction.html[ToLongBiFunction]
| ✓
| link:{issue}/84[#84]
| link:{issue}/156[#156]
| ✓

| link:{jdk-api}/java/util/function/ToDoubleFunction.html[ToDoubleFunction]
| ✓
| link:{issue}/85[#85]
| link:{issue}/157[#157]
| ✓

| link:{jdk-api}/java/util/function/ToIntFunction.html[ToIntFunction]
| ✓
| link:{issue}/86[#86]
| link:{issue}/158[#158]
| ✓

| link:{jdk-api}/java/util/function/ToLongFunction.html[ToLongFunction]
| ✓
| link:{issue}/87[#87]
| link:{issue}/159[#159]
| ✓
|===


== Development Status

The map based implementation covers all functional interfaces from `java.util.function`, Caffeine, Guava and JCache are currently in progress. Take a look at the link:https://github.com/sebhoss/memoization.java/issues[open tickets].

== Usage

Memoize any of the supported types by using the static factory methods supplied by e.g. `MapMemoization` (the `ConcurrentMap` based implementation) like this:

[source, java]
----
Supplier<T> supplier = ...;
Supplier<T> memoizedSupplier = MapMemoization.memoize(supplier);

Function<I, O> function = ...;
Function<I, O> memoizedFunction = MapMemoization.memoize(function);

BiFunction<I, O, R> biFunction = ...;
BiFunction<I, O, R> memoizedBiFunction = MapMemoization.memoize(biFunction);

Consumer<T> consumer = ...;
Consumer<T> memoizedConsumer = MapMemoization.memoize(consumer);
----

=== Integration

This project is split into multiple modules in order to offer the least amount of dependencies to import for any given consumer project. In order to use this project, declare the following inside your POM:

[source, xml, subs="attributes,verbatim"]
----
<dependencies>
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>memoization-core</artifactId>
    <version>${version.memoization}</version>
  </dependency>

  <!-- CAFFEINE ONLY -->
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>memoization-caffeine</artifactId>
    <version>${version.memoization}</version>
  </dependency>
  <dependency>
    <groupId>com.github.ben-manes.caffeine</groupId>
    <artifactId>caffeine</artifactId>
    <version>${version.caffeine}</version>
  </dependency>
  <!-- CAFFEINE ONLY -->

  <!-- GUAVA ONLY -->
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>memoization-guava</artifactId>
    <version>${version.memoization}</version>
  </dependency>
  <dependency>
    <groupId>com.google.guava</groupId>
    <artifactId>guava</artifactId>
    <version>${version.guava}</version>
  </dependency>
  <!-- GUAVA ONLY -->

  <!-- JCACHE ONLY -->
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>memoization-jcache</artifactId>
    <version>${version.memoization}</version>
  </dependency>
  <dependency>
    <groupId>javax.cache</groupId>
    <artifactId>cache-api</artifactId>
    <version>${version.jcache}</version>
  </dependency>
  <!-- Add your JCache implementation here -->
  <dependency>
    <groupId>...</groupId>
    <artifactId>...</artifactId>
    <version>...</version>
  </dependency>
  <!-- JCACHE ONLY -->

</dependencies>
----

Replace `${version.memoization}` with the pass:[<a href="https://search.maven.org/#search%7Cga%7C1%7Cg%3Ade.xn--ho-hia.memoization">latest release</a>]. This project follows the link:http://semver.org/[semantic versioning guidelines].

=== Compatibility

This project is compatible with the following Java versions:

.Java compatibility
|===
| | 1.X.Y | 2.X.Y

| Java 8
| ✓
| ✓
|===

== Alternatives

* link:http://www.tek271.com/software/java/memoizer[Tek271 Memoizer]
* link:https://github.com/kelvinguu/gitmemoizer[GitMemoizer]
* link:http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html[Spring's `@Cacheable`]
* link:https://github.com/marmelo/chili#memoize[Chili's `@Memoize`]
* link:https://clojuredocs.org/clojure.core/memoize[Clojure's `(memoize f)`]
* link:http://docs.groovy-lang.org/latest/html/gapi/groovy/transform/Memoized.html[Groovy's `@Memoized`]
* link:https://github.com/cb372/scalacache#memoization-of-method-results[ScalaCache's `memoize`]

== License

To the extent possible under law, the author(s) have dedicated all copyright
and related and neighboring rights to this software to the public domain
worldwide. This software is distributed without any warranty.

You should have received a copy of the CC0 Public Domain Dedication along
with this software. If not, see http://creativecommons.org/publicdomain/zero/1.0/.

== Mirrors

* https://github.com/sebhoss/memoization.java
* https://bitbucket.org/sebhoss/memoization.java
* https://gitlab.com/sebastian.hoss/memoization.java
* http://v2.pikacode.com/sebhoss/memoization.java
* http://repo.or.cz/memoization.java.git
