= memoization.java image:https://img.shields.io/badge/email-%40metio-brightgreen.svg?style=social&label=mail["Discuss on Google Groups", link="https://groups.google.com/forum/#!forum/metio"] image:https://img.shields.io/badge/irc-%23metio.wtf-brightgreen.svg?style=social&label=IRC["Chat on IRC", link="http://webchat.freenode.net/?channels=metio.wtf"]
Sebastian Hoß <http://seb.xn--ho-hia.de/[@sebhoss]>
:github-org: sebhoss
:project-name: memoization.java
:project-group: de.xn--ho-hia.memoization
:coverity-project: 8732
:codacy-project: 0ed810b7f2514f0ea1c8e86e97c803c4
:jdk-api: https://docs.oracle.com/javase/8/docs/api
:issue: https://github.com/sebhoss/memoization.java/issues
:toc:
:toc-placement: preamble

image:https://img.shields.io/badge/license-cc%20zero-000000.svg?style=flat-square["CC Zero", link="http://creativecommons.org/publicdomain/zero/1.0/"]
pass:[<span class="image"><a class="image" href="https://maven-badges.herokuapp.com/maven-central/de.xn--ho-hia.memoization/memoization.java"><img src="https://img.shields.io/maven-central/v/de.xn--ho-hia.memoization/memoization.java.svg?style=flat-square" alt="Maven Central"></a></span>]
image:https://reposs.herokuapp.com/?path={github-org}/{project-name}&style=flat-square["Repository size"]
image:https://www.openhub.net/p/memoization-java/widgets/project_thin_badge?format=gif["Open Hub statistics", link="https://www.openhub.net/p/memoization-java"]

image:https://img.shields.io/travis/{github-org}/{project-name}/master.svg?style=flat-square["Build Status", link="https://travis-ci.org/{github-org}/{project-name}"]
image:https://img.shields.io/coveralls/{github-org}/{project-name}/master.svg?style=flat-square["Code Coverage", link="https://coveralls.io/github/{github-org}/{project-name}"]
image:https://img.shields.io/coverity/scan/{coverity-project}.svg?style=flat-square["Coverity Scan Result", link="https://scan.coverity.com/projects/{github-org}-memoization-java"]
image:https://img.shields.io/codacy/grade/{codacy-project}.svg?style=flat-square["Codacy Code Quality", link="https://www.codacy.com/app/mail_7/memoization-java"]
image:https://img.shields.io/badge/forkable-yes-brightgreen.svg?style=flat-square["Can this project be forked?", link="https://basicallydan.github.io/forkability/?u={github-org}&r={project-name}"]
image:https://img.shields.io/maintenance/yes/2016.svg?style=flat-square["Is this thing still maintained?"]
image:https://img.shields.io/bountysource/team/metio/activity.svg?style=flat-square["Bounties on open tickets", link="https://www.bountysource.com/teams/metio"]

_Java link:https://en.wikipedia.org/wiki/Memoization[memoization] library - trade space for time_

== Features

* Memoize calls to `Consumer`, `Function`, `Predicate`, `Supplier` and other functional interfaces in `java.util.function`
* Cache values using link:https://github.com/ben-manes/caffeine[Caffeine], link:https://github.com/google/guava/wiki/CachesExplained[Guava], link:https://jcp.org/en/jsr/detail?id=107[JCache] or link:{jdk-api}/java/util/concurrent/ConcurrentMap.html[`ConcurrentMap`]
* Customize cache key calculation

.Coverage of `java.util.function`
|===
| | Caffeine | Guava | JCache | ConcurrentMap

| link:{jdk-api}/java/util/function/BiConsumer.html[BiConsumer]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/BiFunction.html[BiFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/BiPredicate.html[BiPredicate]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/BooleanSupplier.html[BooleanSupplier]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/Consumer.html[Consumer]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/DoubleBinaryOperator.html[DoubleBinaryOperator]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/DoubleConsumer.html[DoubleConsumer]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/DoubleFunction.html[DoubleFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/DoublePredicate.html[DoublePredicate]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/DoubleSupplier.html[DoubleSupplier]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/DoubleToIntFunction.html[DoubleToIntFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/DoubleToLongFunction.html[DoubleToLongFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/DoubleUnaryOperator.html[DoubleUnaryOperator]
| ✓
| ✓
| link:{issue}/135[#135]
| ✓

| link:{jdk-api}/java/util/function/Function.html[Function]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/IntBinaryOperator.html[IntBinaryOperator]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/IntConsumer.html[IntConsumer]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/IntFunction.html[IntFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/IntPredicate.html[IntPredicate]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/IntSupplier.html[IntSupplier]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/IntToDoubleFunction.html[IntToDoubleFunction]
| ✓
| ✓
| link:{issue}/140[#140]
| ✓

| link:{jdk-api}/java/util/function/IntToLongFunction.html[IntToLongFunction]
| ✓
| ✓
| link:{issue}/141[#141]
| ✓

| link:{jdk-api}/java/util/function/IntUnaryOperator.html[IntUnaryOperator]
| ✓
| ✓
| link:{issue}/142[#142]
| ✓

| link:{jdk-api}/java/util/function/LongBinaryOperator.html[LongBinaryOperator]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/LongConsumer.html[LongConsumer]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/LongFunction.html[LongFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/LongPredicate.html[LongPredicate]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/LongSupplier.html[LongSupplier]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/LongToDoubleFunction.html[LongToDoubleFunction]
| ✓
| ✓
| link:{issue}/147[#147]
| ✓

| link:{jdk-api}/java/util/function/LongToIntFunction.html[LongToIntFunction]
| ✓
| ✓
| link:{issue}/148[#148]
| ✓

| link:{jdk-api}/java/util/function/LongUnaryOperator.html[LongUnaryOperator]
| ✓
| ✓
| link:{issue}/149[#149]
| ✓

| link:{jdk-api}/java/util/function/ObjDoubleConsumer.html[ObjDoubleConsumer]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ObjIntConsumer.html[ObjIntConsumer]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ObjLongConsumer.html[ObjLongConsumer]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/Predicate.html[Predicate]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/Supplier.html[Supplier]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ToDoubleBiFunction.html[ToDoubleBiFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ToDoubleFunction.html[ToDoubleFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ToIntBiFunction.html[ToIntBiFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ToIntFunction.html[ToIntFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ToLongBiFunction.html[ToLongBiFunction]
| ✓
| ✓
| ✓
| ✓

| link:{jdk-api}/java/util/function/ToLongFunction.html[ToLongFunction]
| ✓
| ✓
| ✓
| ✓
|===


== Development Status

The Caffeine, Guava and `ConcurrentMap` based implementations cover all functional interfaces from `java.util.function`, the JCache module is currently in progress. Take a look at the link:https://github.com/sebhoss/memoization.java/issues[open tickets].

== Usage

Memoize any of the supported types by using the static factory methods supplied by either using `CaffeineMemoize` pass:[<span class="image"><a class="image" href="https://www.javadoc.io/doc/de.xn--ho-hia.memoization/memoization-caffeine"><img src="https://www.javadoc.io/badge/de.xn--ho-hia.memoization/memoization-caffeine.svg?style=flat-square&color=blue" alt="Read JavaDocs"></a></span>], `GuavaMemoize` pass:[<span class="image"><a class="image" href="https://www.javadoc.io/doc/de.xn--ho-hia.memoization/memoization-guava"><img src="https://www.javadoc.io/badge/de.xn--ho-hia.memoization/memoization-guava.svg?style=flat-square&color=blue" alt="Read JavaDocs"></a></span>], `JCacheMemoize` pass:[<span class="image"><a class="image" href="https://www.javadoc.io/doc/de.xn--ho-hia.memoization/memoization-jcache"><img src="https://www.javadoc.io/badge/de.xn--ho-hia.memoization/memoization-jcache.svg?style=flat-square&color=blue" alt="Read JavaDocs"></a></span>] or `MapMemoize` pass:[<span class="image"><a class="image" href="https://www.javadoc.io/doc/de.xn--ho-hia.memoization/memoization-core"><img src="https://www.javadoc.io/badge/de.xn--ho-hia.memoization/memoization-core.svg?style=flat-square&color=blue" alt="Read JavaDocs"></a></span>] like this:

=== Default cache w/ default cache keys

[source, java]
----
// memoize in Caffeine cache
Consumer<INPUT> consumer                 = ...;
Consumer<INPUT> memoizedConsumer         = CaffeineMemoize.consumer(consumer);

// memoize in Guava cache
Function<INPUT, OUTPUT> function         = ...;
Function<INPUT, OUTPUT> memoizedFunction = GuavaMemoize.function(function);

// memoize in JCache cache
Predicate<INPUT> predicate               = ...;
Predicate<INPUT> memoizedPredicate       = JCacheMemoize.predicate(predicate);

// memoize in ConcurrentMap
Supplier<OUTPUT> supplier                = ...;
Supplier<OUTPUT> memoizedSupplier        = MapMemoize.supplier(supplier);
----

=== Default cache w/ custom cache keys

[source, java]
----
// memoize in Caffeine cache
Consumer<INPUT> consumer                 = ...;
Function<INPUT, KEY> keyFunction         = ...;
Consumer<INPUT> memoizedConsumer         = CaffeineMemoize.consumer(consumer, keyFunction);

// memoize in Guava cache
Function<INPUT, OUTPUT> function         = ...;
Function<INPUT, KEY> keyFunction         = ...;
Function<INPUT, OUTPUT> memoizedFunction = GuavaMemoize.function(function, keyFunction);

// memoize in JCache cache
Predicate<INPUT> predicate               = ...;
Function<INPUT, KEY> keyFunction         = ...;
Predicate<INPUT> memoizedPredicate       = JCacheMemoize.predicate(predicate, keyFunction);

// memoize in ConcurrentMap
Supplier<OUTPUT> supplier                = ...;
Supplier<KEY> keySupplier                = ...;
Supplier<OUTPUT> memoizedSupplier        = MapMemoize.supplier(supplier, keySupplier);
----

=== Custom cache w/ default cache keys

[source, java]
----
// memoize in Caffeine cache
Consumer<INPUT> consumer                 = ...;
Cache<INPUT, INPUT> cache                = ...; // com.github.benmanes.caffeine.cache.Cache
Consumer<INPUT> memoizedConsumer         = CaffeineMemoize.consumer(consumer, cache);

// memoize in Guava cache
Function<INPUT, OUTPUT> function         = ...;
Cache<INPUT, OUTPUT> cache               = ...; // com.google.common.cache.Cache
Function<INPUT, OUTPUT> memoizedFunction = GuavaMemoize.function(function, cache);

// memoize in JCache cache
Predicate<INPUT> predicate               = ...;
Cache<INPUT, Boolean> cache              = ...; // javax.cache.Cache
Predicate<INPUT> memoizedPredicate       = JCacheMemoize.predicate(predicate, cache);

// memoize in ConcurrentMap
Supplier<OUTPUT> supplier                = ...;
Map<String, OUTPUT> cache                = ...;
Supplier<OUTPUT> memoizedSupplier        = MapMemoize.supplier(supplier, cache);
----

=== Custom cache w/ custom cache keys

[source, java]
----
// memoize in Caffeine cache
Consumer<INPUT> consumer                 = ...;
Function<INPUT, KEY> keyFunction         = ...;
Cache<KEY, INPUT> cache                  = ...; // com.github.benmanes.caffeine.cache.Cache
Consumer<INPUT> memoizedConsumer         = CaffeineMemoize.consumer(consumer, keyFunction, cache);

// memoize in Guava cache
Function<INPUT, OUTPUT> function         = ...;
Function<INPUT, KEY> keyFunction         = ...;
Cache<KEY, OUTPUT> cache                 = ...; // com.google.common.cache.Cache
Function<INPUT, OUTPUT> memoizedFunction = GuavaMemoize.function(function, keyFunction, cache);

// memoize in JCache cache
Predicate<INPUT> predicate               = ...;
Function<INPUT, KEY> keyFunction         = ...;
Cache<KEY, Boolean> cache                = ...; // javax.cache.Cache
Predicate<INPUT> memoizedPredicate       = JCacheMemoize.predicate(predicate, keyFunction, cache);

// memoize in ConcurrentMap
Supplier<OUTPUT> supplier                = ...;
Supplier<KEY> keySupplier                = ...;
Map<KEY, OUTPUT> cache                   = ...;
Supplier<OUTPUT> memoizedSupplier        = MapMemoize.supplier(supplier, keySupplier, cache);
----

=== Integration

In order to use this project, declare the following inside your POM:

[source, xml, subs="attributes,verbatim"]
----
<dependencies>
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>memoization-core</artifactId>
    <version>${version.memoization}</version>
  </dependency>

  <!-- CAFFEINE ONLY -->
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>memoization-caffeine</artifactId>
    <version>${version.memoization}</version>
  </dependency>
  <dependency>
    <groupId>com.github.ben-manes.caffeine</groupId>
    <artifactId>caffeine</artifactId>
    <version>${version.caffeine}</version>
  </dependency>
  <!-- CAFFEINE ONLY -->

  <!-- GUAVA ONLY -->
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>memoization-guava</artifactId>
    <version>${version.memoization}</version>
  </dependency>
  <dependency>
    <groupId>com.google.guava</groupId>
    <artifactId>guava</artifactId>
    <version>${version.guava}</version>
  </dependency>
  <!-- GUAVA ONLY -->

  <!-- JCACHE ONLY -->
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>memoization-jcache</artifactId>
    <version>${version.memoization}</version>
  </dependency>
  <dependency>
    <groupId>javax.cache</groupId>
    <artifactId>cache-api</artifactId>
    <version>${version.jcache}</version>
  </dependency>
  <!-- Add your JCache implementation here -->
  <dependency>
    <groupId>...</groupId>
    <artifactId>...</artifactId>
    <version>...</version>
  </dependency>
  <!-- JCACHE ONLY -->

</dependencies>
----

Replace `${version.memoization}` with the pass:[<a href="https://search.maven.org/#search%7Cga%7C1%7Cg%3Ade.xn--ho-hia.memoization">latest release</a>]. This project follows the link:http://semver.org/[semantic versioning guidelines].

=== Compatibility

This project is compatible with the following Java versions:

.Java compatibility
|===
| | 1.X.Y | 2.X.Y

| Java 8
| ✓
| ✓
|===

== Alternatives

* link:http://www.tek271.com/software/java/memoizer[Tek271 Memoizer]
* link:https://github.com/kelvinguu/gitmemoizer[GitMemoizer]
* link:http://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html#cache-annotations-cacheable[Spring's `@Cacheable`]
* link:https://github.com/marmelo/chili#memoize[Chili's `@Memoize`]
* link:https://clojuredocs.org/clojure.core/memoize[Clojure's `(memoize f)`]
* link:http://docs.groovy-lang.org/latest/html/gapi/groovy/transform/Memoized.html[Groovy's `@Memoized`]
* link:https://github.com/cb372/scalacache#memoization-of-method-results[ScalaCache's `memoize`]

== License

To the extent possible under law, the author(s) have dedicated all copyright
and related and neighboring rights to this software to the public domain
worldwide. This software is distributed without any warranty.

You should have received a copy of the CC0 Public Domain Dedication along
with this software. If not, see http://creativecommons.org/publicdomain/zero/1.0/.

== Mirrors

* https://github.com/sebhoss/memoization.java
* https://bitbucket.org/sebhoss/memoization.java
* https://gitlab.com/sebastian.hoss/memoization.java
* http://v2.pikacode.com/sebhoss/memoization.java
* http://repo.or.cz/memoization.java.git
